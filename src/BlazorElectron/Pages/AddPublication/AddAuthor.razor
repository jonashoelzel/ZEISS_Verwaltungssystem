@page "/addAuthor"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Data.DataSet
@using Zeiss.PublicationManager.Data.DataSet.IO.Read
@using Zeiss.PublicationManager.Business.Logic.IO
@using System.IO

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

@if (ShowAddPopup)
{
    <EditForm Model="@NewAuthor" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@AddNewAuthor">
        <DataAnnotationsValidator />
        <div class="modal fade show" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title w-100 text-center">Autor hinzufügen</h3>
                        <button type="reset" id="cancelButton" @onclick="@CancelAddPopup">
                            <span class="fas fa-times fa-2x"></span>
                        </button>
                    </div>
                    <div class="author-default">
                        <label for="firstname">Vorname</label>
                        <InputText class="form-control" id="firstname" @bind-Value="NewAuthor.Name" /><br />
                        <ValidationMessage For="@(() => NewAuthor.Name)" />
                    </div>
                    <div class="author-default">
                        <label for="surname">Nachname</label>
                        <InputText class="form-control" id="surname" @bind-Value="NewAuthor.Surname" /><br />
                        <ValidationMessage For="@(() => NewAuthor.Surname)" />
                    </div>
                    <div class="modal-body">
                        <button type="submit" id="ButtonInPopup" class="form-control">Neuen Autor hinzufügen</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (ShowPflichtfeldPopup)
{
    <div class="modal fade show" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Autor ist ein Pflichtfeld.<br /> Bitte fügen sie einen neuen Autor hinzu!</h3>
                    <button type="reset" id="cancelButton" @onclick="@CancelPflichtfeldPopup">
                        <span class="fas fa-times fa-2x"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <button type="submit" id="ButtonInPopup" class="form-control" @onclick="@OpenAddPopup">Neuen Autor hinzufügen</button>
                </div>
            </div>
        </div>
    </div>
}

<section class="author panel-default">
    <header class="panel-heading">
        <h4 class="panel-title">Autor</h4>
    </header>
    <div class="author panel-body">
        <div class="author-default">
            <select class="form-control" @onchange="SetAuthor">
                @foreach (var author in authors)
                {
                    <option value="@author.ID">@string.Concat(author.Name, " ", author.Surname)</option>
                }
            </select>

        </div>
        <div class="CenteredButton">
            <button class="AddNewAuthor" @onclick="@OpenAddPopup">Neuen Autor hinzufügen</button>
        </div>
    </div>
</section>

<button class="back" type="button" @onclick="NavigateToPreviousScreen">Zurück</button>
<button class="continue" type="button" @onclick="@NavigateToNextScreen">Weiter</button>

@code
{
    AuthorModel NewAuthor = new();
    List<IAuthor> authors;
    bool ShowAddPopup = false;
    bool ShowPflichtfeldPopup = false;

    private void NavigateToPreviousScreen() => NavigationManager.NavigateTo("addTitle");

    private void NavigateToNextScreen()
    {
        if (Publication.MainAuthor is not null)
            NavigationManager.NavigateTo("addDivision");

        ShowPflichtfeldPopup = true;
    }

    private void HandleInvalidSubmit() { }

    void CancelAddPopup()
    {
        NewAuthor.Name = string.Empty;
        NewAuthor.Surname = string.Empty;
        ShowAddPopup = false;
    }

    void CancelPflichtfeldPopup() => ShowPflichtfeldPopup = false;

    void OpenAddPopup()
    {
        ShowPflichtfeldPopup = false;
        ShowAddPopup = true;
    }

    void AddNewAuthor()
    {
        ShowAddPopup = false;
        authors.Insert(0, NewAuthor);

        dataHandler.SaveAuthor(NewAuthor);

        Publication.MainAuthor = NewAuthor;
    }

    void SetAuthor(ChangeEventArgs author)
    {
        var selectedAuthorID = Guid.Parse(author.Value.ToString());
        Publication.MainAuthor = authors.First(a => a.ID.Equals(selectedAuthorID));
    }

    void fetchData()
    {
        if (authors is not null)
            return;

        authors = new List<IAuthor>();
        var readAuthors = dataHandler.ExcelReader.ReadAuthors();
        foreach (var author in readAuthors)
        {
            authors.Add(author);
        }
    }

    protected override void OnInitialized()
    {
        fetchData();

        var selected = authors.Where(a => a.ID.Equals(Publication.MainAuthor.ID))?.FirstOrDefault();
        if (selected is not null)
        {
            authors.Remove(selected);
            authors.Insert(0, selected);
        }
        else
            Publication.MainAuthor = authors.FirstOrDefault();
    }
}
