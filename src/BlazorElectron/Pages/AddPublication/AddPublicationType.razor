@page "/addPublicationType"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Data.DataSet
@using Zeiss.PublicationManager.Data.DataSet.IO.Read
@using Zeiss.PublicationManager.Business.Logic.IO.Write

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

@if (ShowSavePopup)
{
    <div class="modal fade show" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Erfolgreich gespeichert</h3>
                </div>
                <div class="modal-body">
                    <p>Die Veröffentlichung wurde der Liste hinzugefügt.</p>
                    <button type="submit" id="backToLandingPage" class="form-control" @onclick="@NavigateToLandingPage">Zurück zur Startseite</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowAddPopup)
{
    <EditForm Model="@Publication.MainAuthor" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />
        <div class="modal fade show" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title w-100 text-center">Neuen Veröffentlichungsart hinzufügen</h3>
                    </div>
                    <div class="author-default">
                        <label for="publicationTypeName">Art der Veröffentlichung</label>
                        <InputText class="form-control" id="publicationTypeName" @bind-Value="NewPublicationType.Name" /><br />
                        <ValidationMessage For="@(() => NewPublicationType.Name)" />
                    </div>
                    <div class="modal-body">
                        <button type="submit" id="backToLandingPage" class="form-control" @onclick="@AddNewPublicationType">Neuen Veröffentlichungsart hinzufügen</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

<section class="publicationType panel-default">
    <header class="panel-heading">
        <h4 class="panel-title">Art der Veröffentlichung</h4>
    </header>
    <div class="panel-body">
        <div class="author-default">
            <select class="form-control" @onchange="SetPublicationType">
                @foreach (var publicationType in publicationTypes)
                {
                    <option value="@publicationType.ID">@publicationType.Name</option>
                }
            </select>
        </div>

        <div class="CenteredButton">
            <button class="AddNewAuthor" @onclick="@OpenAddPopup">Neue Veröffentlichungsart hinzufügen</button>
        </div>
    </div>
</section>

<button class="addPub" type="submit" @onclick="@Save">Veröffentlichung hinzufügen</button>
<button class="back" type="button" @onclick="NavigateToPreviousScreen">Zurück</button>
<button class="continue" type="submit" @onclick="@NavigateToNextScreen">Optionale Angaben</button>

@code
{
    PublicationTypeModel NewPublicationType = new();
    List<IPublicationType> publicationTypes;
    bool Next = true;
    bool ShowAddPopup = false;
    bool ShowSavePopup = false;

    private void NavigateToPreviousScreen()
    {
        NavigationManager.NavigateTo("addDateOfRelease");
    }

    private void NavigateToNextScreen()
    {
        NavigationManager.NavigateTo("addDescription");
    }

    private void NavigateToLandingPage()
    {
        NavigationManager.NavigateTo("/");
    }

    void OpenAddPopup() => ShowAddPopup = true;

    private void Save()
    {
        WriteData.Save(Publication);
        ShowSavePopup = true;
    }

    private void HandleInvalidSubmit() { }

    void AddNewPublicationType()
    {
        ShowAddPopup = false;
        publicationTypes.Insert(0, NewPublicationType);

        WriteData.SavePublicationType(NewPublicationType);

        Publication.TypeOfPublication = NewPublicationType;
    }

    void SetPublicationType(ChangeEventArgs publicationType)
    {
        var selectedPublicationTypeID = Guid.Parse(publicationType.Value.ToString());
        Publication.TypeOfPublication = publicationTypes.First(a => a.ID.Equals(selectedPublicationTypeID));
    }

    void fetchData()
    {
        if (publicationTypes is not null)
            return;

        string filepath = WriteData.GetPath();

        var reader = new ReadDataSet(filepath, string.Empty);

        publicationTypes = new List<IPublicationType>();
        var readPublicationTypes = reader.ReadPublicationTypes();
        foreach (var division in readPublicationTypes)
        {
            publicationTypes.Add(division);
        }
    }

    protected override void OnInitialized()
    {
        fetchData();

        var selected = publicationTypes.Where(a => a.ID.Equals(Publication.TypeOfPublication.ID))?.FirstOrDefault();
        if (selected is not null)
        {
            publicationTypes.Remove(selected);
            publicationTypes.Insert(0, selected);
        }
    }
}
