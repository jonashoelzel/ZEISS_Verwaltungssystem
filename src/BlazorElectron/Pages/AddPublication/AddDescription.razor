@page "/addDescription"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Business.Logic.IO
@using BlazorElectron.Data.DataLogic

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler
@inject WorkflowState workflowState

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

@if (ShowSavePopup && workflowState.State == Data.DataLogic.State.Add)
{
    <div class="modal fade show" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Erfolgreich gespeichert</h3>
                </div>
                <div class="modal-body">
                    <p>Die Veröffentlichung wurde der Liste hinzugefügt.</p>
                    <button type="submit" class="form-control primaryButton" @onclick="@NavigateToLandingPage">Zurück zur Startseite</button>
                </div>
            </div>
        </div>
    </div>
}
else if (ShowSavePopup && workflowState.State == Data.DataLogic.State.Edit)
{
    <div class="modal fade show" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Erfolgreich gespeichert</h3>
                </div>
                <div class="modal-body">
                    <p>Die Änderungen wurden gespeichert.</p>
                    <button type="submit" class="form-control primaryButton" @onclick="@NavigateToLandingPage">Zurück zur Startseite</button>
                </div>
            </div>
        </div>
    </div>
}

<EditForm Model="@NewDescription">
    <DataAnnotationsValidator />
    @if (workflowState.State == Data.DataLogic.State.Edit)
    {
        <div class="mode">
            <h2>Veröffentlichung bearbeiten</h2>
        </div>
    }
    else if (workflowState.State == Data.DataLogic.State.Add)
    {
        <div class="mode">
            <h2>Neue Veröffentlichung hinzufügen</h2>
        </div>
    }
    <section class="panel-default">
        <header class="panel-heading">
            <h4 class="panel-title">Zusätzliche Information</h4>
        </header>
        <div class="panel-body">
            <form>
                <div class="panel-object">
                    <label for="titleDescr">Beschreibung</label>
                    <InputText id="titleDescr" class="form-control" @bind-Value="@NewDescription.Description" />
                    <ValidationMessage For="@(() => NewDescription.Description)" />
                </div>
                <div class="panel-object">
                    <label for="textBox">Beschreibungstext</label>
                    <InputTextArea id="textBox" class="form-control" @bind-Value="@NewDescription.AdditionalInformation" rows="5" />
                    <ValidationMessage For="@(() => NewDescription.AdditionalInformation)" />
                </div>
            </form>
        </div>
    </section>

    @if (workflowState.State == Data.DataLogic.State.Edit)
    {
        <button class="primaryButton addPub" type="submit" @onclick="Save">Änderungen Speichern</button>
    }
    else if (workflowState.State == Data.DataLogic.State.Add)
    {
        <button class="primaryButton addPub" type="submit" @onclick="Save">Veröffentlichung hinzufügen</button>
    }
    <button class="primaryButton back" type="button" @onclick="NavigateToPreviousScreen">Pflichtangaben</button>
    <button class="primaryButton continue" type="submit" @onclick="NavigateToNextScreen">
        <span class="fas fa-arrow-circle-right fa-3x"></span>
    </button>
</EditForm>

@code
{
    DescriptionModel NewDescription = new();
    bool ShowSavePopup = false;

    private void NavigateToPreviousScreen()
    {
        updatePublication();
        NavigationManager.NavigateTo("addPublicationType");
    }

    private void NavigateToNextScreen()
    {
        updatePublication();
        NavigationManager.NavigateTo("addPublisher");
    }

    private void NavigateToLandingPage() => NavigationManager.NavigateTo("/SearchPublication");

    private void Save()
    {
        updatePublication();
        dataHandler.Save(Publication);
        ShowSavePopup = true;
    }

    private void updatePublication()
    {
        Publication.Description = NewDescription.Description;
        Publication.AdditionalInformation = NewDescription.AdditionalInformation;
    }

    protected override void OnInitialized()
    {
        NewDescription.Description = Publication.Description;
        NewDescription.AdditionalInformation = Publication.AdditionalInformation;
        base.OnInitialized();
    }
}
