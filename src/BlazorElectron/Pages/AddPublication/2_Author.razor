@page "/addAuthor"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Data.DataSet
@using Zeiss.PublicationManager.Data.DataSet.IO.Read
@using Zeiss.PublicationManager.Business.Logic.IO
@using System.IO
@using BlazorElectron.Data.DataLogic



@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler
@inject WorkflowState workflowState

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

@if (ShowSavePopup && workflowState.State == Data.DataLogic.State.Edit)
{
    <div class="modal fade show" role="dialog" style="@modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Erfolgreich gespeichert</h3>
                </div>
                <div class="modal-body">
                    <p>Die Änderungen wurden gespeichert.</p>
                    <button type="submit" class="form-control primaryButton" @onclick="@NavigateToLandingPage">Zurück zur Startseite</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowAddPopup)
{
    <EditForm Model="@NewAuthor" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@AddNewAuthor">
        <DataAnnotationsValidator />
        <div class="modal fade show" role="dialog" style="@modalDisplay">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title w-100 text-center">Autor hinzufügen</h3>
                        <button type="reset" class="cancelButton" @onclick="@CancelAddPopup">
                            <span class="fas fa-times fa-2x"></span>
                        </button>
                    </div>
                    <div class="modal-object">
                        <label for="firstname">Vorname</label>
                        <InputText class="form-control" id="firstname" @bind-Value="NewAuthor.Name" /><br />
                        <ValidationMessage For="@(() => NewAuthor.Name)" />
                    </div>
                    <div class="modal-object">
                        <label for="surname">Nachname</label>
                        <InputText class="form-control" id="surname" @bind-Value="NewAuthor.Surname" /><br />
                        <ValidationMessage For="@(() => NewAuthor.Surname)" />
                    </div>
                    <div class="modal-body">
                        <button type="submit" id="addButtonInPopup" class="form-control">Hinzufügen</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (ShowPflichtfeldPopup)
{
    <div class="modal fade show" role="dialog" style="@modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Autor ist ein Pflichtfeld.<br /> Bitte fügen sie einen neuen Autor hinzu!</h3>
                    <button type="reset" class="cancelButton" @onclick="@CancelPflichtfeldPopup">
                        <span class="fas fa-times fa-2x"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <button type="submit" id="addButtonInPopup" class="form-control" @onclick="@OpenAddPopup">Neuen Autor hinzufügen</button>
                </div>
            </div>
        </div>
    </div>
}

@if (workflowState.State == Data.DataLogic.State.Edit)
{
    <div class="mode">
        <h2>Veröffentlichung bearbeiten</h2>
    </div>
}
else if (workflowState.State == Data.DataLogic.State.Add)
{
    <div class="mode">
        <h2>Neue Veröffentlichung hinzufügen</h2>
    </div>
}
<section class="panel-default">
    <header class="panel-heading">
        <h4 class="panel-title">Autor</h4>
    </header>
    <div class="panel-body">
        <div class="panel-object">
            <select class="form-control" @onchange="SetAuthor">
                @foreach (var author in authors)
                {
                    if (!String.IsNullOrWhiteSpace(author.Name))
                    {
                        <option value="@author.ID">@string.Concat(author.Name, " ", author.Surname)</option>
                    }

                }
            </select>
        </div>
        <div class="centeredButton">
            <button class="primaryButton addNewField" @onclick="@OpenAddPopup">Neuen Autor hinzufügen</button>
        </div>
    </div>
</section>

@if (workflowState.State == Data.DataLogic.State.Edit)
{
    <button class="primaryButton addPub" type="submit" @onclick="ValidateAndSave">Änderungen Speichern</button>
}
<button class="primaryButton back" type="button" @onclick="NavigateToPreviousScreen">
    <span class="fas fa-arrow-circle-left fa-3x"></span>
</button>
<button class="primaryButton continue" type="button" @onclick="NavigateToNextScreen">
    <span class="fas fa-arrow-circle-right fa-3x"></span>
</button>

@code
{
    AuthorModel NewAuthor = new();
    List<IAuthor> authors = new();
    bool ShowSavePopup = false;
    bool ShowAddPopup = false;
    bool ShowPflichtfeldPopup = false;
    string modalDisplay = "display:none";

    private void NavigateToPreviousScreen() => NavigationManager.NavigateTo("addTitle");

    private void NavigateToLandingPage() => NavigationManager.NavigateTo("/SearchPublication");

    private void NavigateToNextScreen()
    {
        if (Publication.MainAuthor is not null)
        {
            NavigationManager.NavigateTo("addDivision");
        }
        else
        {
            modalDisplay = "display:block";
            ShowPflichtfeldPopup = true;
        }

    }

    private void HandleInvalidSubmit() { }

    void CancelAddPopup()
    {
        NewAuthor.Name = string.Empty;
        NewAuthor.Surname = string.Empty;
        ShowAddPopup = false;
        modalDisplay = "display:none";
    }

    void CancelPflichtfeldPopup()
    {
        ShowPflichtfeldPopup = false;
        modalDisplay = "display:none";
    }
    void OpenAddPopup()
    {
        ShowPflichtfeldPopup = false;
        modalDisplay = "display:block";
        ShowAddPopup = true;
    }

    void AddNewAuthor()
    {
        ShowAddPopup = false;
        modalDisplay = "display:none";

        Publication.MainAuthor = NewAuthor;

        SaveAuthor();
    }

    void SetAuthor(ChangeEventArgs author)
    {
        var selectedAuthorID = Guid.Parse(author.Value.ToString());
        Publication.MainAuthor = authors.First(a => a.ID.Equals(selectedAuthorID));
    }

    private void SaveAuthor()
    {
        try
        {
            dataHandler.SaveAuthor(NewAuthor);

            AuthorModel newAuthor = new();
            newAuthor.Set(NewAuthor);

            authors.Insert(0, newAuthor);
            ReadDataSet.CachedAuthors.Insert(0, newAuthor);

            NewAuthor = new();
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                authorException = true;
                OpenException();
                return;
            }

            throw ex;
        }
    }


    private void ValidateAndSave()
    {
        if (String.IsNullOrWhiteSpace(Publication?.MainAuthor?.Name))
        {
            modalDisplay = "display:block";
            ShowPflichtfeldPopup = true;
        }
        else
        {
            SavePublication();
        }
    }


    private void SavePublication()
    {
        try
        {
            dataHandler.Save(Publication);

            PublicationDataSetModel NewDataSet = new();
            NewDataSet.Set(Publication);

            if (workflowState.State == Data.DataLogic.State.Add)
            {
                ReadDataSet.CachedPublications.Add(NewDataSet);
            }
            else
            {
                int index = ReadDataSet.CachedPublications.FindIndex(item => item.ID == NewDataSet.ID);
                ReadDataSet.CachedPublications[index] = NewDataSet;
            }

            modalDisplay = "display:block";
            ShowSavePopup = true;
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                publicationException = true;
                OpenException();
                return;
            }

            throw ex;
        }

        StateHasChanged();
    }


    void fetchData()
    {
        if (authors.Any())
            return;

        List<IAuthor> readAuthors = ReadDataSet.CachedAuthors;
        foreach (IAuthor author in readAuthors)
        {
            authors.Add(author);
        }

        authors.RemoveAll(x => String.IsNullOrWhiteSpace(x.Name));
    }

    protected override void OnInitialized()
    {
        fetchData();

        var selected = authors.Where(a => a.ID.Equals(Publication.MainAuthor.ID))?.FirstOrDefault();
        if (selected is not null)
        {
            authors.Remove(selected);
            authors.Insert(0, selected);
        }
        else
            Publication.MainAuthor = authors.FirstOrDefault();
    }
}


@if (ShowException)
{
    <div class="modal fade show" role="dialog" style="@modalExceptionDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center" style="font-size:16px">
                        Datei-Zugriffs-Berechtigungs-Fehler
                        <br />
                        <br />Die Datei:
                        <br />"@dataHandler.filePath";
                        <br />wird derzeit von einem anderen Programm verwendet
                        <br />oder Ihr Adminstrator hat Ihnen den Zugriff verwehrt.
                        <br />
                        <br />Sie können warten bis das andere Programm die Datei wieder freigegeben hat und den Vorgang wiederholen.
                        <br />
                        <br />Sollten Sie die Benachrichtigung nach mehrerern Versuchen immernoch sehen,
                        <br />fragen Sie Ihren Adminstator und prüfen Sie, ob die Datei derzeit von einem anderen Programm verwendet wird
                        <br />und prüfen Sie Ihre Berechtigungen.
                    </h3>
                    <button type="reset" class="cancelButton" @onclick="@CloseException">
                        <span class="fas fa-times fa-2x"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <button type="submit" id="addButtonInPopup" class="form-control" @onclick="@Retry">Vorgang Wiederholen</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    string modalExceptionDisplay = "display:block";
    bool ShowException = false;

    bool publicationException = false;
    bool authorException = false;

    public void OpenException()
    {
        modalExceptionDisplay = "display:block";
        ShowException = true;
    }

    void CloseException()
    {
        ShowException = false;
        modalExceptionDisplay = "display:none";
    }

    void Retry()
    {
        if (publicationException)
        {
            SavePublication();
            publicationException = false;
        }
        else if (authorException)
        {
            SaveAuthor();
            authorException = false;
        }

        CloseException();
    }
}

