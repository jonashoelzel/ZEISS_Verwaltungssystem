@page "/searchPub"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Data.DataSet
@using Zeiss.PublicationManager.Data.DataSet.IO.Read
@using Zeiss.PublicationManager.Business.Logic.IO.Write
@using System.IO

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

<EditForm Model="@Publication">

    <section class="search-default">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Titel, Autor, Stichwort, ..."
                   @bind-value="SearchTerm" @bind-value:event="oninput" />
            <!--<button type="button" class="btn">
                <span class="fas fa-search"></span>
            </button> -->
            <button type="button" class="btn" @onclick="@ChangeFilterVisibility" id="openFilter">
                <span class="fas fa-filter fa-2x"></span>
            </button>
        </div>
    </section>

    <section class="dropdownFilter" hidden=@HideFilter>
        <div class="input-group">
            <label>Filtern nach:</label>
            <div class="divisionFilter">
                <select class="form-control" @onchange="@DivisionFilter">
                    @foreach (var div in divisions)
                    {
                        <option value="@div.Name">@div.Name</option>
                    }
                </select>
            </div>
            <!--
            <div class="tagFilter">
                <InputSelect class="form-control" @bind-Value="@Publication.Tags">
                    <option></option>
                    @foreach (var tag in Tags)
                    {
                        <option>@tag</option>
                    }
                </InputSelect>
            </div>  -->
        </div>
    </section>

    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th>
                    <span class="sort-link" @onclick="@(() => SortTable("WorkingTitle"))">Titel</span>
                    <span class="fa @(GetSortStyle("WorkingTitle"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick="@(() => SortTable("MainAuthor.Name"))">Nachname</span>
                    <span class="fa @(GetSortStyle("MainAuthor.Name"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick="@(() => SortTable("MainAuthor.Surname"))">Vorname des Autors</span>
                    <span class="fa @(GetSortStyle("MainAuthor.Surname"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick="@(() => SortTable("DateOfRelease"))">Datum der Veröffentlichung</span>
                    <span class="fa @(GetSortStyle("DateOfRelease"))"></span>
                </th>
                <th>Aktion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var publication in items)
            {
                <tr>
                    <td>@publication.WorkingTitle</td>
                    <td>@publication.MainAuthor.Name</td>
                    <td>@publication.MainAuthor.Surname</td>
                    <td>@publication.DateOfRelease.ToString("dd.MM.yyyy")</td>
                    <td>
                        <button type="button" class="btn-primary">
                            Bearbeiten
                            <span class="fas fa-pencil-alt"></span>
                        </button>
                        <button type="button" class="btn-primary">
                            Löschen
                            <span class="fas fa-trash-alt"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</EditForm>

@code
{
    private List<PublicationDataSet> data;
    private List<Division> divisions;

    void fetchData()
    {
        if (data is not null && divisions is not null)
            return;

        data = dataHandler.ExcelReader.ReadPublicationDataSet();
        divisions = dataHandler.ExcelReader.ReadDivisions();
        divisions.Insert(0, new Division() { Name = string.Empty });
    }

    private bool HideFilter = true;

    private bool IsSortedAscending = false;
    private string CurrentSortColumn;

    string SearchTerm { get; set; } = "";

    string SelectedDivsion { get; set; } = "";

    List<string> Divisions = new List<string>()
{
        "", "DAC", "DQA", "DQA I", "DQA II", "DQA, TAD III", "MSD", "QA", "SAP", "SBD", "SEV", "TAD", "TAD I", "TAD II", "TAD III", "Vorstand", "Vorstand, TAD I"
    };

    List<string> Tags = new List<string>()
{
        "Backend", "Frontend", "Development", ".NET 5.0", ".NET Core", ".NET Framework"
    };

    // Test Data
    public class TableTest
    {
        public string TitleTest { get; set; }
        public string NameTest { get; set; }
        public string SurnameTest { get; set; }
        public DateTime DateTest { get; set; }
        public string Division { get; set; }
    };

    // search term input
    List<PublicationDataSet> items => data?.Where(i => i.WorkingTitle.ToLower().Contains(SearchTerm.ToLower()) ||
                                             i.MainAuthor.Name.ToLower().Contains(SearchTerm.ToLower()) ||
                                             i.MainAuthor.Surname.ToLower().Contains(SearchTerm.ToLower())).ToList();

    // hide or show dropdown-filter
    private void ChangeFilterVisibility() => HideFilter = !HideFilter;

    // get column to sort and set corresponding icon
    private string GetSortStyle(string columnName)
    {
        if (CurrentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (IsSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    // sort the column which was choosen
    private void SortTable(string columnName)
    {
        if (columnName != CurrentSortColumn)
        {
            var split = columnName.Split('.');
            if (split.Length < 2)
                data = data.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            else if (split[0].Equals("MainAuthor"))
                data = data.OrderBy(x => x.MainAuthor.Name).ToList();
            CurrentSortColumn = columnName;
            IsSortedAscending = true;
        }
        else
        {
            if (IsSortedAscending)
            {
                var split = columnName.Split('.');
                if (split.Length < 2)
                    data = data.OrderByDescending(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
                else if (split[0].Equals("MainAuthor"))
                    data = data.OrderByDescending(x => x.MainAuthor.Name).ToList();
            }
            else
            {
                data = data.OrderBy(x => x.GetType().GetProperty(columnName).GetValue(x, null)).ToList();
            }
            IsSortedAscending = !IsSortedAscending;
        }
    }

    private List<PublicationDataSet> helpData;

    protected override void OnInitialized()
    {
        fetchData();
        helpData = data;
    }

    // filter list when changing value of division-filter
    public void DivisionFilter(ChangeEventArgs e)
    {
        SelectedDivsion = e.Value.ToString();
        if (string.IsNullOrEmpty(SelectedDivsion))
        {
            data = helpData;
        }
        else
        {
            data = helpData.Where(f => f.Division.Name.Equals(SelectedDivsion)).ToList();
        }
    }
}