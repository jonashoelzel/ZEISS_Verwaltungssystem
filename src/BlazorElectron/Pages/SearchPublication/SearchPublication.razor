@page "/SearchPublication"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Data.DataSet
@using Zeiss.PublicationManager.Data.DataSet.IO.Read
@using Zeiss.PublicationManager.UI
@using Zeiss.PublicationManager.Business.Logic.IO
@using BlazorElectron.Data.DataLogic

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler
@inject WorkflowState workflowState

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

<!--Start Page Design-->
<EditForm Model="@Publication">

    <section class="search-default">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Titel, Autor, Stichwort, ..."
                   @oninput="SetSearchTerm" />
            <button type="button" class="btn" @onclick="@ChangeFilterVisibility" id="openFilter">
                <span class="fas fa-filter fa-2x"></span>
            </button>
        </div>
    </section>

    <section class="filterSection" hidden=@HideFilter>
        <div class="input-group">
            <label>Filtern nach:</label>
            <div class="dropdownFilter">
                <select class="form-control" @onchange="@SetDivisionFilter">
                    @foreach (var div in cachedDivisions)
                    {
                        <option value="@div.Name">@div.Name</option>
                    }
                </select>
            </div>
            <!--
            <div class="dropdownFilter">
                <InputSelect class="form-control" @bind-Value="@Publication.Tags">
                    <option></option>
                    @foreach (var tag in Tags)
                    {
                        <option>@tag</option>
                    }
                </InputSelect>
            </div>  -->
        </div>
    </section>



    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item">
            <a class="nav-link active" id="Veröffentlichungen-tab" data-toggle="tab" href="#Veröffentlichungen" role="tab" aria-controls="Veröffentlichungen" aria-selected="true">Veröffentlichungen</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="Autoren-tab" data-toggle="tab" href="#Autoren" role="tab" aria-controls="Autoren" aria-selected="false">Autoren</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="Veröffentlichungsarten-tab" data-toggle="tab" href="#Veröffentlichungsarten" role="tab" aria-controls="Veröffentlichungsarten" aria-selected="false">Veröffentlichungsarten</a>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <!--Publications-->
        <div class="tab-pane fade show active" id="Veröffentlichungen" role="tabpanel" aria-labelledby="Veröffentlichungen-tab">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            <span class="sort-link" @onclick="@(() => SetSortColumn("Publication.WorkingTitle"))">Titel</span>
                            <span class="fa @(GetSortStyle("Publication.WorkingTitle"))"></span>
                        </th>
                        <th>
                            <span class="sort-link" @onclick="@(() => SetSortColumn("Publication.MainAuthor.Name"))">Vorname</span>
                            <span class="fa @(GetSortStyle("Publication.MainAuthor.Name"))"></span>
                        </th>
                        <th>
                            <span class="sort-link" @onclick="@(() => SetSortColumn("Publication.MainAuthor.Surname"))">Nachname des Autors</span>
                            <span class="fa @(GetSortStyle("Publication.MainAuthor.Surname"))"></span>
                        </th>
                        <th>
                            <span class="sort-link" @onclick="@(() => SetSortColumn("Publication.DateOfRelease"))">Datum der Veröffentlichung</span>
                            <span class="fa @(GetSortStyle("Publication.DateOfRelease"))"></span>
                        </th>
                        <th>Aktion</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var publication in displayedPublications)
                    {
                        <tr>
                            <td class="align-middle">@publication.WorkingTitle</td>
                            <td class="align-middle">@publication.MainAuthor.Name</td>
                            <td class="align-middle">@publication.MainAuthor.Surname</td>
                            <td class="align-middle">@publication.DateOfRelease.ToString("dd.MM.yyyy")</td>
                            <td>
                                <button type="button" class="btn" @onclick="(() => EditPublication(publication))">
                                    <span class="fas fa-pencil-alt"></span>
                                </button>
                                <button type="button" class="btn" @onclick="@(() => Delete(DeletePopup.Publication, publication.ID))">
                                    <span class="fas fa-trash-alt"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!--Authors-->
        <div class="tab-pane fade" id="Autoren" role="tabpanel" aria-labelledby="Autoren-tab">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            <span class="sort-link" @onclick="@(() => SetSortColumn("Author.Name"))">Vorname</span>
                            <span class="fa @(GetSortStyle("Author.Name"))"></span>
                        </th>
                        <th>
                            <span class="sort-link" @onclick="@(() => SetSortColumn("Author.Surname"))">Nachname des Autors</span>
                            <span class="fa @(GetSortStyle("Author.Surname"))"></span>
                        </th>
                        <th>Aktion</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var author in displayedAuthors)
                    {
                        <tr>
                            <td class="align-middle">@author.Name</td>
                            <td class="align-middle">@author.Surname</td>
                            <td>
                                <button type="button" class="btn" @onclick="(() => EditAuthor(author))">
                                    <span class="fas fa-pencil-alt"></span>
                                </button>
                                <button type="button" class="btn" @onclick="@(() => Delete(DeletePopup.Author, author.ID))">
                                    <span class="fas fa-trash-alt"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!--PublicationTypes-->
        <div class="tab-pane fade" id="Veröffentlichungsarten" role="tabpanel" aria-labelledby="Veröffentlichungsarten-tab">
            <table class="table table-striped table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th>
                            <span class="sort-link" @onclick="@(() => SetSortColumn("PublicationType.Name"))">Veröffentlichungsart</span>
                            <span class="fa @(GetSortStyle("PublicationType.Name"))"></span>
                        </th>
                        <th>Aktion</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var publicationType in displayedPublicationTypes)
                    {
                        <tr>
                            <td class="align-middle">@publicationType.Name</td>
                            <td>
                                <button type="button" class="btn" @onclick="(() => EditPublicationType(publicationType))">
                                    <span class="fas fa-pencil-alt"></span>
                                </button>
                                <button type="button" class="btn" @onclick="@(() => Delete(DeletePopup.PublicationType, publicationType.ID))">
                                    <span class="fas fa-trash-alt"></span>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="form-inline">
        <div class="landingPageAddPublication">
            <button type="button" class="btn" @onclick="NavigateToAddTitleComp">
                <span class="fas fa-plus-circle fa-5x"></span>
            </button>
        </div>
    </div>
</EditForm>


<!--Start Page Code-->
@code
{
public static List<IPublicationDataSet> cachedPublications = new();
public static List<IPublicationDataSet> displayedPublications = new();

public static List<IDivision> cachedDivisions = new();

public static List<IAuthor> cachedAuthors = new();
public static List<IAuthor> displayedAuthors = new();
public static List<IPublicationType> cachedPublicationTypes = new();
public static List<IPublicationType> displayedPublicationTypes = new();


void fetchData(bool reload = false)
{
    try
    {
        if (reload 
            || !ReadDataSet.CachedPublications.Any()
            && !ReadDataSet.CachedDivisions.Any()
            && !ReadDataSet.CachedAuthors.Any()
            && !ReadDataSet.CachedPublicationTypes.Any())
        {
            ReadDataSet.LoadAndCacheData();
        }

        //REMEMBER: These are references. Chanches of the originals also changes the 'copies'.
        cachedPublications = ReadDataSet.CachedPublications;
        displayedPublications = new(cachedPublications);

        cachedDivisions = ReadDataSet.CachedDivisions;
        cachedDivisions.RemoveAll(x => String.IsNullOrWhiteSpace(x.Name));
        cachedDivisions.Insert(0, new Division() { Name = String.Empty });

        cachedAuthors = ReadDataSet.CachedAuthors;
        displayedAuthors = new(cachedAuthors);
        cachedPublicationTypes = ReadDataSet.CachedPublicationTypes;
        displayedPublicationTypes = new(cachedPublicationTypes);
    }
    catch (Exception ex)
    {
        if (ex is UnauthorizedAccessException || ex is IOException)
        {
            fetchException = true;
            OpenException();
            return;
        }

        throw ex;
    }
}

private void NavigateToAddTitleComp()
{
    workflowState.State = Data.DataLogic.State.Add;
    Publication.Reset();
    NavigationManager.NavigateTo("addTitle");
}

private bool HideFilter = true;

private bool IsSortedAscending = false;
private string CurrentSortColumn;

string SelectedDivsion { get; set; } = "";

string CurrentSearchTerm { get; set; } = "";

// Test Data
public class TableTest
{
    public string TitleTest { get; set; }
    public string NameTest { get; set; }
    public string SurnameTest { get; set; }
    public DateTime DateTest { get; set; }
    public string Division { get; set; }
};

protected override void OnInitialized()
{
    fetchData();
    Filter();
}

// filter list when changing value of division-filter
public void SetDivisionFilter(ChangeEventArgs e)
{
    SelectedDivsion = e.Value.ToString();
    Filter();
}


void SetSearchTerm(ChangeEventArgs args)
{
    CurrentSearchTerm = args.Value.ToString();
    Filter();
}

void Filter()
{
    if (!String.IsNullOrWhiteSpace(SelectedDivsion))
    {
        displayedPublications = cachedPublications?.Where(f => f.Division.Name.Equals(SelectedDivsion)).ToList();
    }
    else
    {
        displayedPublications = new(cachedPublications);
    }

    displayedAuthors = new(cachedAuthors);
    displayedPublicationTypes = new(cachedPublicationTypes);

    if (!String.IsNullOrWhiteSpace(CurrentSearchTerm))
    {
        displayedPublications = displayedPublications?.Where(i => i.WorkingTitle.ToLower().Contains(CurrentSearchTerm.ToLower()) ||
                                         i.MainAuthor.Name.ToLower().Contains(CurrentSearchTerm.ToLower()) ||
                                         i.MainAuthor.Surname.ToLower().Contains(CurrentSearchTerm.ToLower())).ToList();

        displayedAuthors = displayedAuthors?.Where(i => i.Name.ToLower().Contains(CurrentSearchTerm.ToLower()) ||
                                         i.Surname.ToLower().Contains(CurrentSearchTerm.ToLower())).ToList();

        displayedPublicationTypes = displayedPublicationTypes?.Where(i => i.Name.ToLower().Contains(CurrentSearchTerm.ToLower())).ToList();
    }

    SortTable();
}


void SetSortColumn(string columnName)
{
    if (columnName == CurrentSortColumn)
    {
        IsSortedAscending = !IsSortedAscending;
    }
    else
    {
        CurrentSortColumn = columnName;
    }

    Filter();
}


// hide or show dropdown-filter
private void ChangeFilterVisibility() => HideFilter = !HideFilter;

// get column to sort and set corresponding icon
private string GetSortStyle(string columnName)
{
    if (CurrentSortColumn != columnName)
    {
        return string.Empty;
    }
    if (IsSortedAscending)
    {
        return "fas fa-sort-amount-up";
    }
    else
    {
        return "fas fa-sort-amount-down";
    }
}

// sort the column which was choosen
private void SortTable()
{
    //1 = ASC. -1 = DESC
    int sortInt = IsSortedAscending ? 1 : -1;
    switch (CurrentSortColumn)
    {
        case "Publication.WorkingTitle":
            displayedPublications.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return String.Compare(x.WorkingTitle, y.WorkingTitle) * sortInt; });
            break;
        case "Publication.MainAuthor.Name":
            displayedPublications.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return String.Compare(x.MainAuthor.Name, y.MainAuthor.Name) * sortInt; });
            break;
        case "Publication.MainAuthor.Surname":
            displayedPublications.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return String.Compare(x.MainAuthor.Surname, y.MainAuthor.Surname) * sortInt; });
            break;
        case "Publication.DateOfRelease":
            displayedPublications.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return DateTime.Compare(x.DateOfRelease, y.DateOfRelease) * sortInt; });
            break;
        
        case "Author.Name":
            displayedAuthors.Sort(delegate (IAuthor x, IAuthor y) { return String.Compare(x.Name, y.Name) * sortInt; });
            break;
        case "Author.Surname":
            displayedAuthors.Sort(delegate (IAuthor x, IAuthor y) { return String.Compare(x.Surname, y.Surname) * sortInt; });
            break;

        case "PublicationType.Name":
            displayedPublicationTypes.Sort(delegate (IPublicationType x, IPublicationType y) { return String.Compare(x.Name, y.Name) * sortInt; });
            break;
    }
}
}





<!--Delete Confirmation Design-->
@if (showDeleteFailed)
{
    <div class="modal fade show" role="dialog" style="@modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Löschen ist nicht möglich!</h3>
                </div>
                <div class="modal-body">
                    <p>Das zu löschende Objekt besteht in einer Veröffentlichung</p>
                    <button type="submit" class="form-control primaryButton" @onclick="CloseDeleteFailedDialog">Okay</button>
                </div>
            </div>
        </div>
    </div>
}

@if (deletePopup != DeletePopup.Hide)
{
    <div class="modal fade show" role="dialog" style="@modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Wollen Sie die Veröffentlichung wirklich löschen?</h3>
                </div>
                <div class="modal-object">
                    <button type="submit" class="form-control primaryButton" @onclick="FinalDelete">Löschen</button>
                </div>
                <div class="modal-object">
                    <button type="submit" class="form-control secondaryButton" @onclick="(() => deletePopup = DeletePopup.Hide)">Abbrechen</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowSuccessfulDelete)
{
    <div class="modal fade show" role="dialog" style="@modalDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Löschen erfolgreich!</h3>
                </div>
                <div class="modal-body">
                    <p>Der Eintrag wurde erfolgreich gelöscht!</p>
                    <button type="submit" class="form-control primaryButton" @onclick="CloseDeleteSuccessDialog">Okay</button>
                </div>
            </div>
        </div>
    </div>
}


<!--Delete Confirmation Code-->
@code
{
    bool showDeleteFailed = false;
    bool ShowSuccessfulDelete = false;
    //bool ShowDeletePopup = false;

    enum DeletePopup
    {
        Hide,
        Publication,
        Author,
        PublicationType,
    }

    private DeletePopup deletePopup = DeletePopup.Hide;

    Guid itemToDelete = new();

    //private void ChancelDeletePopup() => ShowDeletePopup = false;

    void CloseDeleteFailedDialog()
    {
        modalDisplay = "display:none";
        showDeleteFailed = false;
    }

    void CloseDeleteSuccessDialog()
    {
        modalDisplay = "display:none";
        ShowSuccessfulDelete = false;
    }

    private bool DeletePublication(Guid pubID)
    {
        bool success = false;

        try
        {
            success = dataHandler.DeletePublication(pubID);
            if (!success)
                return false;

            ReadDataSet.CachedPublications.Remove(ReadDataSet.CachedPublications.Where(Publication => Publication.ID == pubID).First());

            Filter();
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                deletePublicationException = true;
                retryID = pubID;
                OpenException();

                return false;
            }

            throw ex;
        }

        return success;
    }

    public bool DeleteAuthor(Guid guid)
    {
        bool success = false;

        try
        {
            success = dataHandler.DeleteAuthor(guid);
            if (!success)
                return false;

            ReadDataSet.CachedAuthors.Remove(ReadDataSet.CachedAuthors.Where(Author => Author.ID == guid).First());

            Filter();
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                deleteAuthorException = true;
                retryID = guid;
                OpenException();

                return false;
            }

            throw ex;
        }

        return success;
    }

    public bool DeletePublicationType(Guid guid)
    {
        bool success = false;

        try
        {
            success = dataHandler.DeletePublicationType(guid);
            if (!success)
                return false;

            ReadDataSet.CachedPublicationTypes.Remove(ReadDataSet.CachedPublicationTypes.Where(PublicationType => PublicationType.ID == guid).First());

            Filter();
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                deletePublicationTypeException = true;
                retryID = guid;
                OpenException();

                return false;
            }

            throw ex;
        }

        return success;
    }

    private void Delete(DeletePopup type, Guid guid)
    {
        itemToDelete = guid;
        deletePopup = type;
        modalDisplay = "display:block";
    }

    private void FinalDelete()
    {
        bool success = true;

        switch (deletePopup)
        {
            case DeletePopup.Hide:
                return;
            case DeletePopup.Publication:
                success = DeletePublication(itemToDelete);
                break;
            case DeletePopup.Author:
                success = DeleteAuthor(itemToDelete);
                break;
            case DeletePopup.PublicationType:
                success = DeletePublicationType(itemToDelete);
                break;
            default:
                break;
        }

        if (!success && !ShowFileAccessException)
        {
            modalDisplay = "display:block";
            deletePopup = DeletePopup.Hide;
            showDeleteFailed = true;
        }
        else if (success)
        {
            modalDisplay = "display:block";
            deletePopup = DeletePopup.Hide;
            showDeleteFailed = false;
            ShowSuccessfulDelete = true;
        }
    }
}





<!--Editor Design-->
@if (showEditAuthorPopup)
{
    <EditForm Model="@selectedAuthor" OnInvalidSubmit="@(() => null)" OnValidSubmit="@SaveAuthorChanges">
        <DataAnnotationsValidator />
        <div class="modal fade show" role="dialog" style="@modalDisplay">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title w-100 text-center">Autor bearbeiten</h3>
                        <button type="reset" class="cancelButton" @onclick="@(() => { showEditAuthorPopup = false; modalDisplay = "display:none";})">
                            <span class="fas fa-times fa-2x"></span>
                        </button>
                    </div>
                    <div class="modal-object">
                        <label for="firstname">Vorname</label>
                        <InputText class="form-control" id="firstname" @bind-Value="selectedAuthor.Name" /><br />
                        <ValidationMessage For="@(() => selectedAuthor.Name)" />
                    </div>
                    <div class="modal-object">
                        <label for="surname">Nachname</label>
                        <InputText class="form-control" id="surname" @bind-Value="selectedAuthor.Surname" /><br />
                        <ValidationMessage For="@(() => selectedAuthor.Surname)" />
                    </div>
                    <div class="modal-body">
                        <button type="submit" id="addButtonInPopup" class="form-control">Änderung speichern</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@if (showEditPublicationType)
{
    <EditForm Model="@selectedPublicationType" OnInvalidSubmit="@(() => null)" OnValidSubmit="@SavePublicationTypeChanges">
        <DataAnnotationsValidator />
        <div class="modal fade show" role="dialog" style="@modalDisplay">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title w-100 text-center">Veröffentlichungsart bearbeiten</h3>
                        <button type="reset" class="cancelButton" @onclick="@(() => { showEditPublicationType = false; modalDisplay = "display:none";})">
                            <span class="fas fa-times fa-2x"></span>
                        </button>
                    </div>
                    <div class="modal-object">
                        <label for="publicationTypeName">Art der Veröffentlichung</label>
                        <InputText class="form-control" id="publicationTypeName" @bind-Value="selectedPublicationType.Name" /><br />
                        <ValidationMessage For="@(() => selectedPublicationType.Name)" />
                    </div>
                    <div class="modal-body">
                        <button type="submit" id="addButtonInPopup" class="form-control">Änderung speichern</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}


<!--Editor Code-->
@code
{
    private bool showEditAuthorPopup = false;
    private IAuthor selectedAuthor = new Author();

    private bool showEditPublicationType = false;
    private IPublicationType selectedPublicationType = new PublicationType();

    private string modalDisplay = "display:none";

    private void EditPublication(IPublicationDataSet publication)
    {
        workflowState.State = Data.DataLogic.State.Edit;
        Publication.Set(publication);
        NavigationManager.NavigateTo("addTitle");
    }


    private void EditAuthor(IAuthor author)
    {
        selectedAuthor = author;
        modalDisplay = "display:block";
        showEditAuthorPopup = true;
    }

    private void SaveAuthorChanges()
    {
        try
        {
            modalDisplay = "display:none";
            showEditAuthorPopup = false;

            dataHandler.SaveAuthor(selectedAuthor);

            int index = ReadDataSet.CachedAuthors.FindIndex(author => author.ID.Equals(selectedAuthor.ID));
            ReadDataSet.CachedAuthors[index] = selectedAuthor;

            fetchData();
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                updateAuthorException = true;
                OpenException();
            }

            throw ex;
        }
    }


    private void EditPublicationType(IPublicationType publicationType)
    {
        selectedPublicationType = publicationType;
        modalDisplay = "display:block";
        showEditPublicationType = true;
    }

    private void SavePublicationTypeChanges()
    {
        try
        {
            modalDisplay = "display:none";
            showEditPublicationType = false;
           
            dataHandler.SavePublicationType(selectedPublicationType);

            var index = ReadDataSet.CachedPublicationTypes.FindIndex(publT => publT.ID.Equals(selectedPublicationType.ID));
            ReadDataSet.CachedPublicationTypes[index] = selectedPublicationType;

            fetchData();
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                updatePublicationTypeException = true;
                OpenException();
            }

            throw ex;
        }


    }
}




<!--Access Exception Design-->
@if (ShowFileAccessException)
{
    <div class="modal fade show" role="dialog" style="@modalExceptionDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center" style="font-size:16px">
                        Datei-Zugriffs-Berechtigungs-Fehler
                        <br />
                        <br />Die Datei:
                        <br />"@dataHandler.filePath";
                        <br />wird derzeit von einem anderen Programm verwendet
                        <br />oder Ihr Adminstrator hat Ihnen den Zugriff verwehrt.
                        <br />
                        <br />Sie können warten bis das andere Programm die Datei wieder freigegeben hat und den Vorgang wiederholen.
                        <br />
                        <br />Sollten Sie die Benachrichtigung nach mehrerern Versuchen immernoch sehen,
                        <br />fragen Sie Ihren Adminstator und prüfen Sie, ob die Datei derzeit von einem anderen Programm verwendet wird
                        <br />und prüfen Sie Ihre Berechtigungen.
                    </h3>
                    <button type="reset" class="cancelButton" @onclick="@CloseException">
                        <span class="fas fa-times fa-2x"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <button type="submit" id="addButtonInPopup" class="form-control" @onclick="@Retry">Vorgang Wiederholen</button>
                </div>
            </div>
        </div>
    </div>
}


<!--Access Exception Code-->
@code
{
    string modalExceptionDisplay = "display:block";
    bool ShowFileAccessException = false;

    bool fetchException = false;
    bool deletePublicationException = false;
    bool deleteAuthorException = false;
    bool deletePublicationTypeException = false;

    bool updateAuthorException = false;
    bool updatePublicationTypeException = false;

    Guid retryID = new();

    public void OpenException()
    {
        modalExceptionDisplay = "display:block";
        ShowFileAccessException = true;
    }

    void CloseException()
    {
        ShowFileAccessException = false;
        modalExceptionDisplay = "display:none";

        ResetExceptions();
    }

    void ResetExceptions()
    {
        fetchException = false;
        deletePublicationException = false;
        deleteAuthorException = false;
        deletePublicationTypeException = false;
        updateAuthorException = false;
        updatePublicationTypeException = false;
    }

    void Retry()
    {
        if (fetchException)
        {
            fetchData();
        }
        else if (deletePublicationException)
        {
            Delete(DeletePopup.Publication, retryID);
        }
        else if (deleteAuthorException)
        {
            Delete(DeletePopup.Author, retryID);
        }
        else if (deletePublicationTypeException)
        {
            Delete(DeletePopup.PublicationType, retryID);
        }
        else if (updateAuthorException)
        {
            SaveAuthorChanges();
        }
        else if (updatePublicationTypeException)
        {
            SavePublicationTypeChanges();
        }

        CloseException();
    }
}
