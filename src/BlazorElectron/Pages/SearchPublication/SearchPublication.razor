@page "/SearchPublication"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Data.DataSet
@using Zeiss.PublicationManager.Data.DataSet.IO.Read
@using Zeiss.PublicationManager.UI
@using Zeiss.PublicationManager.Business.Logic.IO
@using BlazorElectron.Data.DataLogic

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler
@inject WorkflowState workflowState

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

<EditForm Model="@Publication">

    <section class="search-default">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Titel, Autor, Stichwort, ..."
                   @oninput="SetSearchTerm" />
            <button type="button" class="btn" @onclick="@ChangeFilterVisibility" id="openFilter">
                <span class="fas fa-filter fa-2x"></span>
            </button>
        </div>
    </section>

    <section class="filterSection" hidden=@HideFilter>
        <div class="input-group">
            <label>Filtern nach:</label>
            <div class="dropdownFilter">
                <select class="form-control" @onchange="@SetDivisionFilter">
                    @foreach (var div in divisions)
                    {
                        <option value="@div.Name">@div.Name</option>
                    }
                </select>
            </div>
            <!--
            <div class="dropdownFilter">
                <InputSelect class="form-control" @bind-Value="@Publication.Tags">
                    <option></option>
                    @foreach (var tag in Tags)
                    {
                        <option>@tag</option>
                    }
                </InputSelect>
            </div>  -->
        </div>
    </section>

    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>
                    <span class="sort-link" @onclick="@(() => SetSortColumn("WorkingTitle"))">Titel</span>
                    <span class="fa @(GetSortStyle("WorkingTitle"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick="@(() => SetSortColumn("MainAuthor.Name"))">Vorname</span>
                    <span class="fa @(GetSortStyle("MainAuthor.Name"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick="@(() => SetSortColumn("MainAuthor.Surname"))">Nachname des Autors</span>
                    <span class="fa @(GetSortStyle("MainAuthor.Surname"))"></span>
                </th>
                <th>
                    <span class="sort-link" @onclick="@(() => SetSortColumn("DateOfRelease"))">Datum der Ver√∂ffentlichung</span>
                    <span class="fa @(GetSortStyle("DateOfRelease"))"></span>
                </th>
                <th>Aktion</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var publication in items)
            {
                <tr>
                    <td class="align-middle">@publication.WorkingTitle</td>
                    <td class="align-middle">@publication.MainAuthor.Name</td>
                    <td class="align-middle">@publication.MainAuthor.Surname</td>
                    <td class="align-middle">@publication.DateOfRelease.ToString("dd.MM.yyyy")</td>
                    <td>
                        <button type="button" class="btn" @onclick="(() => EditThisPublication(publication))">
                            <span class="fas fa-pencil-alt"></span>
                        </button>
                        <button type="button" class="btn" @onclick="@(() => Delete(publication.ID))">
                            <span class="fas fa-trash-alt"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="form-inline">
        <div class="landingPageAddPublication">
            <button type="button" class="btn" @onclick="NavigateToAddTitleComp">
                <span class="fas fa-plus-circle fa-5x"></span>
            </button>
        </div>
    </div>
</EditForm>

@code
{
    public static List<IPublicationDataSet> data = new();
    public static List<IDivision> divisions = new();

    void fetchData()
    {
        try
        {
            if (!ReadDataSet.ChachedPublications.Any() && !ReadDataSet.ChachedDivisions.Any())
            {
                ReadDataSet.LoadAndChacheData();
            }

            //REMEMBER: These are references. Chanches of the originals also changes the 'copies'.
            data = ReadDataSet.ChachedPublications;
            divisions = ReadDataSet.ChachedDivisions;
            divisions.Insert(0, new Division() { Name = string.Empty });

            items = data;
        }
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                OpenException();
                return;
            }

            throw ex;
        }
    }

    private void NavigateToAddTitleComp()
    {
        workflowState.State = Data.DataLogic.State.Add;
        Publication.Reset();
        NavigationManager.NavigateTo("addTitle");
    }

    private void EditThisPublication(IPublicationDataSet publication)
    {
        workflowState.State = Data.DataLogic.State.Edit;
        Publication.Set(publication);
        NavigationManager.NavigateTo("addTitle");
    }

    private bool HideFilter = true;

    private bool IsSortedAscending = false;
    private string CurrentSortColumn;

    string SelectedDivsion { get; set; } = "";

    string CurrentSearchTerm { get; set; } = "";

    // Test Data
    public class TableTest
    {
        public string TitleTest { get; set; }
        public string NameTest { get; set; }
        public string SurnameTest { get; set; }
        public DateTime DateTest { get; set; }
        public string Division { get; set; }
    };

    List<IPublicationDataSet> items = new();


    protected override void OnInitialized()
    {
        fetchData();
    }

    // filter list when changing value of division-filter
    public void SetDivisionFilter(ChangeEventArgs e)
    {
        SelectedDivsion = e.Value.ToString();
        Filter();
    }


    void SetSearchTerm(ChangeEventArgs args)
    {
        CurrentSearchTerm = args.Value.ToString();
        Filter();
    }

    void SetSortColumn(string columnName)
    {
        if (columnName == CurrentSortColumn)
        {
            IsSortedAscending = !IsSortedAscending;
        }
        else
        {
            CurrentSortColumn = columnName;
        }

        Filter();
    }


    // hide or show dropdown-filter
    private void ChangeFilterVisibility() => HideFilter = !HideFilter;

    // get column to sort and set corresponding icon
    private string GetSortStyle(string columnName)
    {
        if (CurrentSortColumn != columnName)
        {
            return string.Empty;
        }
        if (IsSortedAscending)
        {
            return "fas fa-sort-amount-up";
        }
        else
        {
            return "fas fa-sort-amount-down";
        }
    }

    // sort the column which was choosen
    private void SortTable()
    {
        //1 = ASC. -1 = DESC
        int sortInt = IsSortedAscending ? 1 : -1;
        switch (CurrentSortColumn)
        {
            case "WorkingTitle":
                items.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return String.Compare(x.WorkingTitle, y.WorkingTitle) * sortInt; });
                break;
            case "MainAuthor.Name":
                items.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return String.Compare(x.MainAuthor.Name, y.MainAuthor.Name) * sortInt; });
                break;
            case "MainAuthor.Surname":
                items.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return String.Compare(x.MainAuthor.Surname, y.MainAuthor.Surname) * sortInt; });
                break;
            case "DateOfRelease":
                items.Sort(delegate (IPublicationDataSet x, IPublicationDataSet y) { return DateTime.Compare(x.DateOfRelease, y.DateOfRelease) * sortInt; });
                break;
        }
    }



    void SearchAndFilter()
    {
        Filter();
    }


    void Filter()
    {

        if (!String.IsNullOrWhiteSpace(SelectedDivsion))
        {
            items = data?.Where(f => f.Division.Name.Equals(SelectedDivsion)).ToList();
        }
        else
        {
            items = data;
        }


        if (!String.IsNullOrWhiteSpace(CurrentSearchTerm))
        {
            items = items?.Where(i => i.WorkingTitle.ToLower().Contains(CurrentSearchTerm.ToLower()) ||
                                             i.MainAuthor.Name.ToLower().Contains(CurrentSearchTerm.ToLower()) ||
                                             i.MainAuthor.Surname.ToLower().Contains(CurrentSearchTerm.ToLower())).ToList();
        }

        SortTable();
    }



    private void Delete(Guid pubID)
    {
        try
        {
            dataHandler.DeletePublication(pubID);
            ReadDataSet.ChachedPublications.Remove(ReadDataSet.ChachedPublications.Where(Publication => Publication.ID == pubID).First());

            Filter();
        }
        //TODO FIX
        catch (Exception ex)
        {
            if (ex is UnauthorizedAccessException || ex is IOException)
            {
                OpenException();
                return;
            }

            throw ex;
        }
    }
}


@if (ShowOpenException)
{
    <div class="modal fade show" role="dialog" style="@modalExceptionDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center" style="font-size:16px">
                        Datei-Zugriffs-Berechtigungs-Fehler
                        <br />
                        <br />Die Datei:
                        <br />"@dataHandler.filePath";
                        <br />wird derzeit von einem anderen Programm verwendet
                        <br />oder Ihr Adminstrator hat Ihnen den Zugriff verwehrt.
                        <br />
                        <br />Sie k√∂nnen warten bis das andere Programm die Datei wieder freigegeben hat und den Vorgang wiederholen.
                        <br />
                        <br />Sollten Sie die Benachrichtigung nach mehrerern Versuchen immernoch sehen,
                        <br />fragen Sie Ihren Adminstator und pr√ºfen Sie, ob die Datei derzeit von einem anderen Programm verwendet wird
                        <br />und pr√ºfen Sie Ihre Berechtigungen.
                    </h3>
                    <button type="reset" class="cancelButton" @onclick="@CloseException">
                        <span class="fas fa-times fa-2x"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <button type="submit" id="addButtonInPopup" class="form-control" @onclick="@Retry">Vorgang Wiederholen</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    string modalExceptionDisplay = "display:block";
    bool ShowOpenException = false;

    public void OpenException()
    {
        modalExceptionDisplay = "display:block";
        ShowOpenException = true;
    }

    void CloseException()
    {
        ShowOpenException = false;
        modalExceptionDisplay = "display:none";
    }

    void Retry()
    {
        try
        {
            fetchData();
            CloseException();
        }
        catch
        {
            OpenException();
        }
    }
}
