@page "/"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using ElectronNET.API;
@using ElectronNET.API.Entities;
@using Zeiss.PublicationManager.Business.Logic.IO

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

<section class="panel-default">
    <header class="panel-heading">
        <h4 class="panel-title">Excel Datei auswählen</h4>
    </header>
    <div class="panel-body centeredButton chooseExcel">
        <button type="button" class="primaryButton openExcel" @onclick="openFileDialog">Datei Öffnen</button>
        <button type="button" class="secondaryButton newExcel" @onclick="createFielDialog">Neue Excel erstellen</button>
    </div>
</section>

@code
{
    async Task openFileDialog()
    {
        try
        {
            if (!HybridSupport.IsElectronActive)
            {
                dataHandler.CreateNewExcelIfNotExisting();

                NavigationManager.NavigateTo("/SearchPublication");
                return;
            }

            var options = new OpenDialogOptions
            {
                Title = "Choose a file",
                Filters = new[]
                {
                new FileFilter
                {
                    Name = "Excel",
                    Extensions = new[] { "xlsx" }
                },
            },
                Properties = new[]
                {
                OpenDialogProperty.multiSelections, OpenDialogProperty.showHiddenFiles
            }
            };

            var mainWindow = Electron.WindowManager.BrowserWindows.First();

            var selectedFiles = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);

            if (!System.IO.File.Exists(selectedFiles.FirstOrDefault()))
                return;

            dataHandler.SetFilePath(selectedFiles.FirstOrDefault());

            NavigationManager.NavigateTo("/SearchPublication");
        }
        catch
        {
            OpenException();
        }
    }

    async Task createFielDialog()
    {
        if (!HybridSupport.IsElectronActive)
        {
            return;
        }

        var mainWindow = Electron.WindowManager.BrowserWindows.FirstOrDefault();

        var options = new SaveDialogOptions
        {
            Title = "Choose a path to save the file",
            Filters = new[]
            {
                new FileFilter
                {
                    Name = "Excel",
                    Extensions = new[] { "xlsx" }
                },
            },
        };

        var newFile = await Electron.Dialog.ShowSaveDialogAsync(mainWindow, options);

        if (string.IsNullOrWhiteSpace(newFile))
            return;

        dataHandler.SetFilePath(newFile);

        NavigationManager.NavigateTo("/SearchPublication");
    }
}


@if (ShowException)
{
    <div class="modal fade show" role="dialog" style="@modalExceptionDisplay">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center" style="font-size:16px">
                        Datei-Zugriffs-Berechtigungs-Fehler
                        <br />
                        <br />Die Datei: 
                        <br />"@dataHandler.filePath";
                        <br />wird derzeit von einem anderen Programm verwendet
                        <br />oder Ihr Adminstrator hat Ihnen den Zugriff verwehrt.
                        <br />
                        <br />Sie können warten bis das andere Programm die Datei wieder freigegeben hat und den Vorgang wiederholen.
                        <br />
                        <br />Sollten Sie die Benachrichtigung nach meherern Versuchen immernoch sehen,
                        <br />fragen Sie Ihren Adminstator und prüfen Sie, ob die Datei derzeit von einem anderen Programm verwendet wird
                        <br />und prüfen Sie Ihre Berechtigungen.
                    </h3>
                    <button type="reset" class="cancelButton" @onclick="@CloseException">
                        <span class="fas fa-times fa-2x"></span>
                    </button>
                </div>
                <div class="modal-body">
                    <button type="submit" id="addButtonInPopup" class="form-control" @onclick="@Retry">Vorgang Wiederholen</button>
                </div>
            </div>
        </div>
    </div>
}

@code
{
    string modalExceptionDisplay = "display:none";
    bool ShowException = false;

    public void OpenException()
    {
        modalExceptionDisplay = "display:block";
        ShowException = true;
    }

    void CloseException()
    {
        ShowException = false;
        modalExceptionDisplay = "display:none";
    }

    async void Retry()
    {
        try
        {
            await openFileDialog();
            CloseException();
        }
        catch
        {
            OpenException();
        }
    }
}

