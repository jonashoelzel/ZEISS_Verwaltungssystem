@page "/editPublisher"
@using Zeiss.PublicationManager.Data.DataSet.Model
@using Zeiss.PublicationManager.Data.DataSet
@using Zeiss.PublicationManager.Data.DataSet.IO.Read
@using Zeiss.PublicationManager.Business.Logic.IO

@inject NavigationManager NavigationManager
@inject PublicationDataSetModel Publication
@inject DataHandler dataHandler

<img src="https://upload.wikimedia.org/wikipedia/commons/9/95/Zeiss_logo.svg" class="logo" />

@if (ShowSavePopup)
{
    <div class="modal fade show" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title w-100 text-center">Erfolgreich gespeichert</h3>
                </div>
                <div class="modal-body">
                    <p>Die Veröffentlichung wurde der Liste hinzugefügt.</p>
                    <button type="submit" id="backToLandingPage" class="form-control primaryButton" @onclick="@NavigateToLandingPage">Zurück zur Startseite</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ShowAddPopup)
{
    <EditForm Model="@newPublisher" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@AddNewPublisher">
        <DataAnnotationsValidator />
        <div class="modal fade show" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title w-100 text-center"> Verlag hinzufügen</h3>
                        <button type="reset" class="cancelButton" @onclick="@Cancel">
                            <span class="fas fa-times fa-2x"></span>
                        </button>
                    </div>
                    <div class="modal-object">
                        <label for="publicationTypeName">Name des Verlags</label>
                        <InputText class="form-control" id="publicationTypeName" @bind-Value="newPublisher.Name" /><br />
                        <ValidationMessage For="@(() => newPublisher.Name)" />
                    </div>
                    <div class="modal-body">
                        <button type="submit" id="addButtonInPopup" class="form-control">Hinzufügen</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

<div class="mode">
    <h2>Veröffentlichung bearbeiten</h2>
</div>
<section class="panel-default">
    <header class="panel-heading">
        <h4 class="panel-title">Verlag des Mediums</h4>
    </header>
    <div class="panel-body">
        <div class="panel-object">
            <select class="form-control" @onchange="SetPublisher">
                @foreach (var publisher in publishers)
                {
                    <option value="@publisher.ID">@publisher.Name</option>
                }
            </select>
        </div>
        <div class="centeredButton">
            <button class="primaryButton addNewField" @onclick="@OpenAddPopup">Neuen Verlag hinzufügen</button>
        </div>
    </div>
</section>

<button class="primaryButton addPub" type="submit">Veröffentlichung speichern</button>
<button class="primaryButton back" type="button" @onclick="NavigateToPreviousScreen">
    <span class="fas fa-arrow-circle-left fa-3x"></span>
</button>
<button class="primaryButton continue" type="button" @onclick="NavigateToNextScreen">
    <span class="fas fa-arrow-circle-right fa-3x"></span>
</button>

@code
{
    PublisherModel newPublisher = new();
    List<IPublisher> publishers;
    bool ShowAddPopup = false;
    bool ShowSavePopup = false;

    private void NavigateToPreviousScreen() => NavigationManager.NavigateTo("editDescription");

    private void NavigateToNextScreen() => NavigationManager.NavigateTo("editTags");

    private void NavigateToLandingPage() => NavigationManager.NavigateTo("/SearchPublication");

    void Cancel()
    {
        newPublisher.Name = string.Empty;
        ShowAddPopup = false;
    }

    void OpenAddPopup() => ShowAddPopup = true;

    private void Save()
    {
        dataHandler.Save(Publication);
        ShowSavePopup = true;
    }

    private void HandleInvalidSubmit() { }

    void AddNewPublisher()
    {
        ShowAddPopup = false;
        publishers.Insert(0, newPublisher);

        dataHandler.SavePublisher(newPublisher);

        Publication.PublishedBy = newPublisher;
        newPublisher = new();
    }

    void SetPublisher(ChangeEventArgs publicationType)
    {
        var selectedPublicationTypeID = Guid.Parse(publicationType.Value.ToString());
        Publication.PublishedBy = publishers.First(a => a.ID.Equals(selectedPublicationTypeID));
    }

    void fetchData()
    {
        if (publishers is not null)
            return;

        publishers = new List<IPublisher>();
        var readPublishers = dataHandler.ExcelReader.ReadPublishers();
        foreach (var publisher in readPublishers)
        {
            publishers.Add(publisher);
        }
    }

    protected override void OnInitialized()
    {
        fetchData();

        var selected = publishers.Where(a => a.ID.Equals(Publication.PublishedBy.ID))?.FirstOrDefault();
        if (selected is not null)
        {
            publishers.Remove(selected);
            publishers.Insert(0, selected);
        }
        else
            Publication.PublishedBy = publishers.FirstOrDefault();
    }
}
